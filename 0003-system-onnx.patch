diff -up onnxruntime-1.21.1/cmake/external/onnxruntime_external_deps.cmake.4~ onnxruntime-1.21.1/cmake/external/onnxruntime_external_deps.cmake
--- onnxruntime-1.21.1/cmake/external/onnxruntime_external_deps.cmake.4~	2025-10-05 19:45:50.547722248 +0200
+++ onnxruntime-1.21.1/cmake/external/onnxruntime_external_deps.cmake	2025-10-05 19:46:57.783927505 +0200
@@ -497,19 +497,8 @@ else()
 endif()
 
 endif()
-onnxruntime_fetchcontent_declare(
-  onnx
-  URL ${DEP_URL_onnx}
-  URL_HASH SHA1=${DEP_SHA1_onnx}
-  PATCH_COMMAND ${ONNXRUNTIME_ONNX_PATCH_COMMAND}
-  EXCLUDE_FROM_ALL
-  FIND_PACKAGE_ARGS NAMES ONNX onnx
-)
-if (NOT onnxruntime_MINIMAL_BUILD)
-  onnxruntime_fetchcontent_makeavailable(onnx)
-else()
-  include(onnx_minimal)
-endif()
+
+find_package(ONNX REQUIRED)
 
 if(TARGET ONNX::onnx AND NOT TARGET onnx)
   message(STATUS "Aliasing ONNX::onnx to onnx")
@@ -567,13 +556,6 @@ set(onnxruntime_EXTERNAL_LIBRARIES ${onn
 # The other libs do not have the problem. All the sources are already there. We can compile them in any order.
 set(onnxruntime_EXTERNAL_DEPENDENCIES onnx_proto flatbuffers::flatbuffers)
 
-if(NOT (onnx_FOUND OR ONNX_FOUND)) # building ONNX from source
-  target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
-  if (NOT onnxruntime_USE_FULL_PROTOBUF)
-    target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
-  endif()
-endif()
-
 if (onnxruntime_RUN_ONNX_TESTS)
   add_definitions(-DORT_RUN_EXTERNAL_ONNX_TESTS)
 endif()
